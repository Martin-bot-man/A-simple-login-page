/*!
 * ------------------------------------------- START OF THIRD PARTY NOTICE -----------------------------------------
 * 
 * This file is based on or incorporates material from the projects listed below (Third Party IP). The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third Party IP to you under the licensing terms for the Microsoft product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
 * 
 *   json2.js (2016-05-01)
 *   https://github.com/douglascrockford/JSON-js
 *   License: Public Domain
 * 
 * Provided for Informational Purposes Only
 * 
 * ----------------------------------------------- END OF THIRD PARTY NOTICE ------------------------------------------
 */
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{473:function(e,n,t){var r=t(2),i=t(0),o=t(1),a=t(4),s=t(617),d=t(3),c=t(32),l=t(35),u=t(10).getInstance(window.ServerData),p=t(8),w=t(7),v=t(14),f=t(5),x=t(9),h=t(16),_=t(20);var b=window,T=d.String,g=i.PaginatedState,k=i.LoginMode,P=i.CredentialType,C=i.EstsError,m=o.Helper,S=s.GrctResultAction;function R(e){var n=this,i=e.serverData,o=e.serverError,d=e.isInitialView,c=e.username,b=e.displayName||"",R=e.hipRequiredForUsername,y=e.passwordBrowserPrefill,D=e.availableCreds||[],L=e.evictedCreds||[],E=e.defaultKmsiValue,B=e.userTenantBranding,I=e.sessions,A=e.callMetadata,F=e.flowToken,V=e.useEvictedCredentials,W=e.showCredViewBrandingDesc,O=e.supportsNativeCredentialRecovery,U=e.forgotPasswordText,H=e.accessRecoveryLink,M=e.boilerPlateText,N=e.hideAccountResetCredentials,q=i.str,K=i.f,G=i.Ax,Z=i.s,J=i.d,j=i.urlSwitch,z=i.a2,$=i.i,X=i.AA,Y=i.fPOST_ForceSignin,Q=i.b9,ee=i.AV,ne=i.aq,te=i.e,re=i.sErrorCode,ie=i.fShowHipOnNewView,oe=(i.BZ,i.Bo,i.J),ae=i.R,se=i.I,de=i.G,ce=i.g,le=i.H,ue=i.fShouldSupportTargetCredentialForRecovery,pe=i.O,we=i.Bl,ve=i.fEnableLivePreview,fe=i.AJ,xe=!1,he=null,_e=!1,be=!1,Te={},ge=null,ke={},Pe=!1,Ce=r.observable(!1),me=r.observable();function Se(){n.onSubmitReady()}function Re(e){n.isBackButtonVisible(e),n.onSetBackButtonState(te&&e)}function ye(e){return e.getResponseJson&&(e=e.getResponseJson()),{success:!0,userCode:e.UserCode,deviceCode:e.SessionLookupKey}}function De(){return n.setDefaultFocus(),{success:!1}}n.onSwitchView=a.create(),n.onSubmitReady=a.create(),n.onResetPassword=a.create(u.getDefaultEventTracingOptions(w.ClientTracingEventIds.ComponentEvent_LoginPaginatedPasswordView_onResetPassword,!0)),n.onRedirect=a.create(),n.onSetBackButtonState=a.create(),n.onSetPendingRequest=a.create(),n.onUpdateFlowToken=a.create(),n.onRestoreIsRecoveryAttemptPost=a.create(),n.passwordTextbox=new l(r.pureComputed((function(){var e;if(me())return me();if(!Ce())return e=o||null,o=null,e;return n.passwordTextbox.value()?null:q.CT_PWD_STR_Error_MissingPassword})),y),n.passwordTextbox.value.extend({logValue:u.getPasswordTextBoxPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_Password})}),n.passwordTextbox.error.extend({logValue:u.getPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_ClientError})}),n.hipInterface=r.observable(),n.isKmsiChecked=r.observable(E).extend({logValue:u.getPropertyLogOption(n,{eventId:w.ClientTracingEventIds.PropertyValue_LoginPaginatedPasswordView_KMSI})}),n.isRequestPending=r.observable(!1),n.unsafe_username=r.observable(),n.showTileLogo=r.observable(!1),n.isBackButtonVisible=r.observable(!1),n.secondaryButtonText=r.observable(),n.useEvictedCredentials=r.observable(V),n.showPassword=r.observable(!1),n.shouldHipInit=r.observable(!1),n.tenantBranding=null,n.unsafe_displayName=null,n.username=c,n.unsafe_passwordAriaLabel=null,n.hasRemoteNgc=!1,n.availableCreds=D,n.evictedCreds=L,n.allowPhoneDisambiguation=!1,n.unsafe_pageDescription=null,n.unsafe_pageTitle=null,n.unsafe_skipZTDLinkText=null,n.isInitialView=d,n.showHipOnPasswordView=!1,n.showChangeUserLink=!1,n.callMetadata=A,n.flowToken=F,n.showCredViewBrandingDesc=W,n.supportsNativeCredentialRecovery=O,n.hideForgotMyPassword=!1,n.unsafe_forgotPasswordText=q.STR_SSSU_ForgotPassword||q.CT_PWD_STR_ForgotPwdLink_Text,n.hidePasswordReset=!1,n.accessRecoveryLink=null,n.resetPasswordUrl=null,n.boilerPlateText=null,u.attachViewLoadClientTracingOptions(n,{eventId:w.ClientTracingEventIds.Event_LoginPaginatedPasswordView_onLoad}),n.saveSharedData=function(e){var t=Te.result;e.remoteNgcParams.requestSent=!1,e.useEvictedCredentials=_e||n.useEvictedCredentials(),e.password=n.passwordTextbox.value(),e.showCredViewBrandingDesc=!1,e.remoteLoginUserCode=t?t.userCode:null,e.remoteLoginDeviceCode=t?t.deviceCode:null,ue?e.targetCredentialForRecovery=Pe?P.Password:P.None:e.isRecoveryAttemptPost=Pe,he&&(e.otcCredential=he),Pe&&(e.recoveryCredentialsData=ke)},n.getState=function(){return{isKmsiChecked:n.isKmsiChecked(),useEvictedCredentials:n.useEvictedCredentials(),grctRequestHelperState:O?ge.getState():null}},n.restoreState=function(e){e&&(n.isKmsiChecked(e.isKmsiChecked),n.useEvictedCredentials(e.useEvictedCredentials),O&&ge.restoreState(e.grctRequestHelperState))},n.setDefaultFocus=function(){n.passwordTextbox.focused(!0)},n.primaryButton_onClick=function(){var e=n.hipInterface();if(!xe&&!n.isRequestPending())if(Ce(!0),e&&e.enableValidation(),null===n.passwordTextbox.error())if(e){if(null!==e.getError())return void e.focus();xe=!0,e.verify((function(){xe=!1,Se()}))}else be&&ie?n.onSwitchView(g.Hip):Se();else n.setDefaultFocus()},n.secondaryButton_onClick=function(){n.onSwitchView(g.Previous)},n.phoneDisambiguation_onClick=function(){n.onSwitchView(g.PhoneDisambiguation)},n.resetPassword_onClick=function(){if(O){var e=m.htmlUnescape(b);n.isRequestPending(!0),n.onSetPendingRequest(!0),x.throwUnhandledExceptionOnRejection(ge.sendAsync(e,F,P.Password).then((function(e){switch(n.isRequestPending(!1),n.onSetPendingRequest(!1),e.flowToken&&(F=e.flowToken,n.onUpdateFlowToken(e.flowToken)),e.action){case S.ShowError:me(e.error),n.setDefaultFocus();break;case S.SwitchView:ke=r.utils.extend(e.sharedData,e.viewParams||{}),Pe=!0,n.onSwitchView(e.viewId)}})))}else n.onResetPassword(b)},n.selectAccount_onClick=function(){$&&j?n.onRedirect({url:j,eventOptions:{eventId:p.EventIds.Redriect_SwitchUser}}):n.onSwitchView(I.length?g.Tiles:g.Username)},n.hip_onHipLoad=function(){n.isRequestPending(!1),null!==n.passwordTextbox.error()&&n.setDefaultFocus()},n.skip_onClick=function(){null},n.switchToRemoteNGC_onClick=function(){n.onSwitchView(g.RemoteNGC)},n.skipZtd_onClick=function(){n.onRedirect({url:z,eventOptions:{eventId:p.EventIds.Redirect_SkipZeroTouch}})},n.privacy_onClick=function(){n.onSwitchView(g.ViewAgreement)},n.tileLogo_onLoad=function(){n.showTileLogo(!0)},n.desktopSso_onSuccess=function(){n.onSubmitReady()},n.switchToEvictedCredPicker_onClick=function(){_e=!0,n.onSwitchView(g.CredentialPicker)},n.credSwitchLink_onSwitchView=function(e,t,r){r&&(he=r),n.onSwitchView(e,t)},n.credSwitchLink_onSetPendingRequest=function(e){n.onSetPendingRequest(e),n.isRequestPending(e)},n.credSwitchLink_onUpdateFlowToken=function(e){e&&(F=e,n.onUpdateFlowToken(e))},n.remoteLogin_onClick=function(){var e;x.throwUnhandledExceptionOnRejection((e=h.Purpose.XboxRemoteConnect,function(e){return new f((function(n,t){new _({purpose:e,flowToken:F,unauthSessionId:oe,lcid:ae,siteId:se,clientId:de,forwardedClientId:ce,noPaBubbleVersion:le,successCallback:n,failureCallback:t}).sendRequest()}))}(e).then(ye,De)).then((function(e){e.success&&(Te.result=e,n.onSwitchView(g.RemoteLoginPolling))})))},function(){var e=m.htmlUnescape(b);if(n.unsafe_username(m.htmlUnescape(c)),n.unsafe_displayName=r.observable(e).extend({preventExternalWrite:null}),n.allowPhoneDisambiguation=!$&&!T.isEmailAddress(b)&&!T.isSkypeName(b)&&T.isPhoneNumber(b),n.hasRemoteNgc=!!r.utils.arrayFirst(D,(function(e){return e.credType===P.RemoteNGC})),be=!!G&&c===R,n.showHipOnPasswordView=be&&!ie,n.showChangeUserLink=X&&($&&j||d),n.tenantBranding=B,Z&&d?n.unsafe_pageDescription=T.format(q.CT_PWD_STR_RemoteConnect_PasswordPage_Desc,Z,e):K===k.ForceSignin||K===k.ForceSigninMobile||K===k.ForceSigninHost||Y?n.unsafe_pageDescription=function(e,n){switch(e){case C.SsoArtifactExpiredDueToConditionalAccess:return q.WF_STR_ASLP_Info;case C.SsoArtifactExpiredDueToConditionalAccessReAuth:return q.WF_STR_ReAuth_Info;default:return T.format(q.WF_STR_ForceSI_Info,n)}}(re,e):q.CT_PWD_STR_EnterPassword_Desc&&(n.unsafe_pageDescription=T.format(q.CT_PWD_STR_EnterPassword_Desc,e)),ne&&ee){var o=m.htmlUnescape(ee);n.unsafe_pageTitle=Q?T.format(q.CT_Win10_PwdWithOrgDomain_AndFriendlyName,m.htmlUnescape(Q),o):T.format(q.CT_Win10_STR_Pwd_Title_WithOrgDomain,o),n.unsafe_skipZTDLinkText=T.format(q.CT_Win10_STR_Pwd_StartOver_WithOrgDomain,o)}else n.unsafe_pageTitle=q.CT_PWD_STR_EnterYourPassword_Title,n.unsafe_skipZTDLinkText=q.CT_Win10_STR_StartOver;if(n.unsafe_passwordAriaLabel=T.format(q.CT_PWD_STR_PwdTB_AriaLabel,e),n.showHipOnPasswordView&&n.isRequestPending(!0),n.unsafe_displayName.subscribe((function(){setTimeout((function(){n.passwordTextbox.value(null)}),0)})),d?J&&Re(!0):Re(!0),G&&n.showHipOnPasswordView&&t.e(1).then(function(){t(827),n.shouldHipInit(!0)}.bind(null,t))["catch"](t.oe),B){var a=v.getLayoutTemplateConfig(B);B.ForgotPasswordText&&(n.unsafe_forgotPasswordText=m.htmlUnescape(B.ForgotPasswordText)),n.accessRecoveryLink=B.AccessRecoveryLink,fe?(n.hideForgotMyPassword=a.hideAccountResetCredentials,n.hidePasswordReset=a.hideAccountResetCredentials):(n.hideForgotMyPassword=a.hideForgotMyPassword||a.hideAccountResetCredentials,n.hidePasswordReset=a.hideResetItNow||a.hideAccountResetCredentials)}O?(ge=new s(i),n.onRestoreIsRecoveryAttemptPost(),we&&(n.resetPasswordUrl=n.accessRecoveryLink)):we&&(n.resetPasswordUrl=n.accessRecoveryLink||pe),ve&&(n.unsafe_forgotPasswordText=m.htmlUnescape(U()),n.accessRecoveryLink=H,n.hideForgotMyPassword=N,n.boilerPlateText=m.htmlUnescape(M()))}()}c.applyExtenders(r),r.components.register("login-paginated-password-view",{viewModel:R,template:t(618),synchronous:!b.ServerData.A||o.Helper.isStackSizeGreaterThan(b.ServerData.A),enableExtensions:!0}),e.exports=R},617:function(e,n,t){var r=t(0),i=t(5),o=t(3),a=t(11),s=t(8),d=o.String,c=o.Object,l=r.CredentialType,u=r.ApiErrorCodes,p=r.EstsError,w=r.PaginatedState,v=x.GrctResultAction={ShowError:1,SwitchView:2},f=x.GrctRequestHelperFlags={DisableAutoSend:1};function x(e,n){var t=this,x={},h=e,_=0!=(n&f.DisableAutoSend),b=h.str,T=h.L,g=h.urlGetRecoveryCredentialType,k=h.arrProofData||{},P=h.fIsRestrictedWsi;function C(e){e.proof.str={},c.extend(e.proof.str,k[e.proof.type]||{})}function m(e){var n={};if(e&&e.error)switch(e.error.code){case u.AuthFailure:n=y(b.CT_PWD_STR_Error_FlowTokenExpired);break;case p.TenantDoesNotSupportNativeCredentialRecovery:case p.UserDoesNotSupportNativeCredentialRecovery:case p.CredentialDoesNotSupportNativeRecovery:n=y(b.CT_PWD_STR_Error_CredentialDoesNotSupportNativeRecovery);break;default:n=y(b.CT_PWD_STR_Error_GetRecoveryCredentialTypeError)}else n=y(b.CT_PWD_STR_Error_GetRecoveryCredentialTypeError);return n.flowToken=e.FlowToken||null,n}function S(e){var n=e.Credentials,t=null;return n&&(t=n.PrefCredential),t}function R(e,n){return{action:v.SwitchView,viewId:e,viewParams:n}}function y(e,n,t){return{action:v.ShowError,error:e,isBlockingError:n,bypassCache:t}}t.sendAsync=function(e,n,o){var c=d.cleanseUsername(e,!0),u=x[c]?x[c]:null,p=u||function(e,n){return new i((function(t,i){new a({checkApiCanary:T}).Json({url:g,eventId:s.EventIds.Api_GetRecoveryCredentialType},{targetCredential:e,flowToken:n},t,i,r.DefaultRequestTimeout)}))}(o,n);return i.all([p]).then((function(e){var n=e[0];return function(e,n){var r={},i=t.getGrctSharedData(e,n);(r=function(e){var n=S(e);if(P&&!(e.Credentials.HasPassword||e.Credentials.HasGoogleFed||e.Credentials.HasCertAuth||e.Credentials.HasFido||e.Credentials.HasRemoteNGC||e.Credentials.HasPhone||e.Credentials.HasFacebookFed)&&n!==l.AccessPass)return R(w.MoreInfo);switch(n){case l.OneTimeCode:var t=w.OneTimeCodeRecovery;return _&&(t=w.ConfirmSend),R(t);default:return y(b.CT_PWD_STR_Error_GetRecoveryCredentialTypeError,!1,!0)}}(n)).flowToken=n.FlowToken||null,r.bypassCache||(x[e]=n,x[e].FlowToken=null);return r.sharedData=i,r}(c,n)}),m)},t.getState=function(){return{cache:x}},t.restoreState=function(e){e&&(x=e.cache||{})},t.getGrctSharedData=function(e,n){var t={},r=S(n);return t.preferredCredential=r,t.availableRecoveryCreds=function(e,n){var t=[];if(k[PROOF.Type.Email]){var r=function(e,n){var t=[];if(S(n)===l.OneTimeCode){var r={credType:l.OneTimeCode,proof:{display:e,data:d.cleanseUsername(e),otcSent:!0,isEncrypted:!1,isDefault:!0,isNopa:!0,type:PROOF.Type.Email}};t.push(r)}return t}(e,n);r.length>0&&(o.Array.forEach(r,C),t=t.concat(r))}return t}(e,n),r===l.OneTimeCode&&(t.otcCredential=o.Array.first(t.availableRecoveryCreds,(function(e){return e.credType===l.OneTimeCode&&e.proof.otcSent}))),t.otcParams={requestSent:r===l.OneTimeCode},t}}e.exports=x},618:function(e,n,t){e.exports="\x3c!-- "+(t(36),t(13),t(33),' --\x3e\n\n\x3c!--  --\x3e\n\n<div aria-hidden="true">\n    <input type="hidden" name="i13" data-bind="value: isKmsiChecked() ? 1 : 0" />\n\n    \x3c!-- ko if: svr.fIsUpdatedAutocompleteEnabled --\x3e\n    <input type="hidden" name="login" autocomplete="username" data-bind="value: unsafe_username" />\n    \x3c!-- /ko --\x3e\n    \x3c!-- ko ifnot: svr.fIsUpdatedAutocompleteEnabled --\x3e\n    <input type="hidden" name="login" data-bind="value: unsafe_username" />\n    \x3c!-- /ko --\x3e\n\n    \x3c!-- The loginfmt input type is different as some password managers require it to be of type text.\n        Since screen readers might not hide this input, a parent div with aria-hidden true has been added. --\x3e\n    <input type="text" name="loginfmt" data-bind="moveOffScreen, value: unsafe_displayName" />\n    <input type="hidden" name="type"\n        data-bind="value: svr.bn ? ')+t(0).PostType.PasswordInline+" : "+t(0).PostType.Password+'" />\n    <input type="hidden" name="LoginOptions"\n        data-bind="value: isKmsiChecked() ? '+t(7).LoginOption.RememberPWD+" : "+t(7).LoginOption.NothingChecked+'" />\n    <input type="hidden" name="lrt" data-bind="value: callMetadata.IsLongRunningTransaction" />\n    <input type="hidden" name="lrtPartition" data-bind="value: callMetadata.LongRunningTransactionPartition" />\n    <input type="hidden" name="hisRegion" data-bind="value: callMetadata.HisRegion" />\n    <input type="hidden" name="hisScaleUnit" data-bind="value: callMetadata.HisScaleUnit" />\n</div>\n\n<div id="loginHeader" class="row" data-bind="externalCss: { \'title\': true }">\n    <div role="heading" aria-level="1" data-bind="text: str[\'CT_PWD_STR_EnterPassword_Title\']"></div>\n</div>\n\n\x3c!-- ko if: showCredViewBrandingDesc --\x3e\n<div class="row text-body">\n    <div id="credViewBrandingDesc" class="wrap-content" data-bind="text: str[\'WF_STR_Default_Desc\']"></div>\n</div>\n\x3c!-- /ko --\x3e\n\n\x3c!-- ko if: unsafe_pageDescription --\x3e\n<div class="row text-body">\n    <div id="passwordDesc" class="wrap-content" data-bind="text: unsafe_pageDescription"></div>\n</div>\n\x3c!-- /ko --\x3e\n\n<div class="row">\n    <div class="form-group col-md-24">\n        <div role="alert" aria-live="assertive">\n            \x3c!-- ko if: passwordTextbox.error --\x3e\n              \x3c!-- ko if: svr.Bl --\x3e\n              <div id="passwordError" data-bind="\n                  externalCss: { \'error\': true },\n                  htmlWithBindings: passwordTextbox.error,\n                  childBindings: {\n                      \'idA_IL_ForgotPassword0\': {\n                          href: resetPasswordUrl || \'#\',\n                          attr: {\n                              target: accessRecoveryLink && \'_blank\',\n                              role: resetPasswordUrl ? \'link\' : \'button\',\n                          },\n                          click: accessRecoveryLink ? null : resetPassword_onClick } }"></div>\n              \x3c!-- /ko --\x3e\n              \x3c!-- ko ifnot: svr.Bl --\x3e\n              <div id="passwordError" data-bind="\n                  externalCss: { \'error\': true },\n                  htmlWithBindings: passwordTextbox.error,\n                  childBindings: {\n                      \'idA_IL_ForgotPassword0\': {\n                          href: accessRecoveryLink || svr.O,\n                          attr: {\n                              target: accessRecoveryLink && \'_blank\',\n                              role: supportsNativeCredentialRecovery ? \'button\' : \'link\'\n                          },\n                          click: accessRecoveryLink ? null : resetPassword_onClick } }"></div>\n              \x3c!-- /ko --\x3e\n            \x3c!-- /ko --\x3e\n        </div>\n\n        <div class="placeholderContainer" data-bind="component: { name: \'placeholder-textbox-field\',\n            publicMethods: passwordTextbox.placeholderTextboxMethods,\n            params: {\n                serverData: svr,\n                hintText: str[\'CT_PWD_STR_PwdTB_Label\'] },\n            event: {\n                updateFocus: passwordTextbox.textbox_onUpdateFocus } }">\n\n            <input name="passwd" type="password" id="i0118" class="form-control" aria-required="true" data-bind="\n                textInput: passwordTextbox.value,\n                ariaDescribedBy: [\n                    \'loginHeader passwordError\',\n                    showCredViewBrandingDesc ? \'credViewBrandingDesc\' : \'\',\n                    unsafe_pageDescription ? \'passwordDesc\' : \'\'].join(\' \'),\n                hasFocusEx: passwordTextbox.focused() && !showPassword(),\n                placeholder: $placeholderText,\n                ariaLabel: unsafe_passwordAriaLabel,\n                moveOffScreen: showPassword,\n                autocomplete: svr.fIsUpdatedAutocompleteEnabled ? \'current-password\' : \'off\',\n                externalCss: {\n                    \'input\': true,\n                    \'text-box\': true,\n                    \'has-error\': passwordTextbox.error }" />\n\n            \x3c!-- ko if: svr.cv && showPassword() --\x3e\n            <input type="text" autocomplete="off" class="form-control" aria-required="true" data-bind="\n                textInput: passwordTextbox.value,\n                ariaDescribedBy: [\n                    \'loginHeader\',\n                    showCredViewBrandingDesc ? \'credViewBrandingDesc\' : \'\',\n                    unsafe_pageDescription ? \'passwordDesc\' : \'\'].join(\' \'),\n                hasFocusEx: true,\n                placeholder: $placeholderText,\n                ariaLabel: unsafe_passwordAriaLabel,\n                externalCss: {\n                    \'input\': true,\n                    \'text-box\': true,\n                    \'has-error\': passwordTextbox.error }" />\n            \x3c!-- /ko --\x3e\n        </div>\n\n        \x3c!-- ko if: svr.cv --\x3e\n        <div class="checkbox no-margin-bottom">\n            <label>\n                <input id="ShowHidePasswordCheckbox" type="checkbox" data-bind="checked: showPassword, ariaLabel: str[\'CT_PWD_STR_ShowPasswordAriaLabel\']" />\n                <span id="ShowHidePasswordLabel" data-bind="text: str[\'CT_PWD_STR_ShowPasswordLabel\']"></span>\n            </label>\n        </div>\n        \x3c!-- /ko --\x3e\n    </div>\n</div>\n\n\x3c!-- ko if: shouldHipInit --\x3e\n<div data-bind="component: { name: \'hip-field\',\n    publicMethods: hipInterface,\n    params: {\n        str: str,\n        onDemandVerify: true,\n        hasServerError: svr.CZ,\n        useFake: svr.ct },\n    event: {\n        hipLoad: hip_onHipLoad } }">\n</div>\n\x3c!-- /ko --\x3e\n\n<div data-bind="css: { \'position-buttons\': !tenantBranding.BoilerPlateText && !boilerPlateText }, externalCss: { \'password-reset-links-container\': true }">\n    <div>\n        \x3c!-- ko if: svr.cM --\x3e\n        <div class="row text-body">\n            <div id="swv-warning" class="wrap-content" data-bind="text: str[\'CT_PWD_STR_PersistentCookies_Warning\']"></div>\n        </div>\n        \x3c!-- /ko --\x3e\n        \x3c!-- ko if: svr.Bz !== false && !svr.cM && !tenantBranding.KeepMeSignedInDisabled --\x3e\n        <div id="idTd_PWD_KMSI_Cb" class="form-group checkbox text-block-body no-margin-top" data-bind="visible: !svr.i && !showHipOnPasswordView">\n            <label id="idLbl_PWD_KMSI_Cb">\n                <input name="KMSI" id="idChkBx_PWD_KMSI0Pwd" type="checkbox" data-bind="checked: isKmsiChecked, ariaLabel: str[\'CT_PWD_STR_KeepMeSignedInCB_Text\']" />\n                <span data-bind="text: str[\'CT_PWD_STR_KeepMeSignedInCB_Text\']"></span>\n            </label>\n        </div>\n        \x3c!-- /ko --\x3e\n\n        <div class="row">\n            <div class="col-md-24">\n                <div class="text-13">\n                    \x3c!-- ko if: svr.a2 && svr.aq --\x3e\n                    <div class="form-group">\n                        <a id="idSkipZtdLink" name="switchToOfflineAccount" href="#" data-bind="\n                            text: unsafe_skipZTDLinkText,\n                            click: skipZtd_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko ifnot: hideForgotMyPassword --\x3e\n                    <div class="form-group">\n                        \x3c!-- ko if: svr.Bl --\x3e\n                        <a id="idA_PWD_ForgotPassword" data-bind="\n                            text: unsafe_forgotPasswordText,\n                            href: resetPasswordUrl || \'#\',\n                            attr: {\n                              target: accessRecoveryLink && \'_blank\',\n                              role: resetPasswordUrl ? \'link\' : \'button\'\n                            },\n                            click: accessRecoveryLink ? null : resetPassword_onClick"></a>\n                        \x3c!-- /ko --\x3e\n                        \x3c!-- ko ifnot: svr.Bl --\x3e\n                        <a id="idA_PWD_ForgotPassword" role="link" href="#" data-bind="\n                            text: unsafe_forgotPasswordText,\n                            href: accessRecoveryLink || svr.O,\n                            attr: { target: accessRecoveryLink && \'_blank\' },\n                            click: accessRecoveryLink ? null : resetPassword_onClick"></a>\n                        \x3c!-- /ko --\x3e\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko if: allowPhoneDisambiguation --\x3e\n                    <div class="form-group">\n                        <a id="switchToPhoneDisambiguation" href="#" data-bind="text: str[\'WF_STR_ThisIsntMyNumber_Text\'], click: phoneDisambiguation_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko ifnot: useEvictedCredentials --\x3e\n                        \x3c!-- ko component: { name: "cred-switch-link-control",\n                            params: {\n                                serverData: svr,\n                                username: username,\n                                availableCreds: availableCreds,\n                                flowToken: flowToken,\n                                currentCred: { credType: '+t(0).CredentialType.Password+' } },\n                            event: {\n                                switchView: credSwitchLink_onSwitchView,\n                                redirect: onRedirect,\n                                setPendingRequest: credSwitchLink_onSetPendingRequest,\n                                updateFlowToken: credSwitchLink_onUpdateFlowToken } } --\x3e\n                        \x3c!-- /ko --\x3e\n\n                        \x3c!-- ko if: evictedCreds.length > 0 --\x3e\n                        <div class="form-group">\n                            <a id="evictedAccount" href="#" data-bind="text: str[\'CT_PWD_STR_SwitchToCredPicker_Link_EvictedAcct\'], click: switchToEvictedCredPicker_onClick"></a>\n                        </div>\n                        \x3c!-- /ko --\x3e\n                    \x3c!-- /ko --\x3e\n                    \x3c!-- ko if: showChangeUserLink --\x3e\n                    <div class="form-group">\n                        <a id="i1668" href="#" data-bind="text: str[\'CT_FED_STR_ChangeUserLink_Text\'], click: selectAccount_onClick"></a>\n                    </div>\n                    \x3c!-- /ko --\x3e\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="win-button-pin-bottom" data-bind="css : { \'boilerplate-button-bottom\': tenantBranding.BoilerPlateText || boilerPlateText }">\n        <div class="row" data-bind="css: { \'move-buttons\': tenantBranding.BoilerPlateText || boilerPlateText }">\n            <div data-bind="component: { name: \'footer-buttons-field\',\n                params: {\n                    serverData: svr,\n                    primaryButtonText: str[\'CT_PWD_STR_SignIn_Button\'],\n                    isPrimaryButtonEnabled: !isRequestPending(),\n                    isPrimaryButtonVisible: svr.e,\n                    isSecondaryButtonEnabled: true,\n                    isSecondaryButtonVisible: false },\n                event: {\n                    primaryButtonClick: primaryButton_onClick } }">\n            </div>\n        </div>\n    </div>\n</div>\n\n\x3c!-- ko if: tenantBranding.BoilerPlateText || boilerPlateText--\x3e\n<div id="idBoilerPlateText" class="wrap-content" data-bind="\n    htmlWithMods: svr.fEnableLivePreview ? boilerPlateText : tenantBranding.BoilerPlateText,\n    htmlMods: { filterLinks: svr.T },\n    css: { \'transparent-lightbox\': tenantBranding.UseTransparentLightBox },\n    externalCss: { \'boilerplate-text\': true }"></div>\n\x3c!-- /ko --\x3e\n'}}]),window.__convergedlogin_ppassword_b2ec0d9661751c7da58d=!0;
//# sourceMappingURL=../b2ec0d9661751c7da58d.map